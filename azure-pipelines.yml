# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

jobs:

# Visual Studio 2019 variants

- job: Windows_2019_VS2019_Win32
  displayName: "Windows 2019, VS 2019, Win32"
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: CMake@1
    inputs:
      cmakeArgs: -G "Visual Studio 16 2019" -A Win32 ..
  - task: MSBuild@1
    inputs:
      solution: 'build/*.sln'
      platform: 'Win32'
      configuration: 'RelWithDebInfo'
- job: Windows_2019_VS2019_x64
  displayName: "Windows 2019, VS 2019, x64"
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: CMake@1
    inputs:
      cmakeArgs: -G "Visual Studio 16 2019" -A x64 ..
  - task: MSBuild@1
    inputs:
      solution: 'build/*.sln'
      msbuildArchitecture: 'x64'
      platform: 'x64'
      configuration: 'RelWithDebInfo'
- job: Windows_2019_VS2019_ARM
  displayName: "Windows 2019, VS 2019, ARM"
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: CMake@1
    inputs:
      cmakeArgs: -G "Visual Studio 16 2019" -A ARM ..
  - task: MSBuild@1
    inputs:
      solution: 'build/*.sln'
      platform: 'ARM'
      configuration: 'RelWithDebInfo'
- job: Windows_2019_VS2019_ARM64
  displayName: "Windows 2019, VS 2019, ARM64"
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: CMake@1
    inputs:
      cmakeArgs: -G "Visual Studio 16 2019" -A ARM64 ..
  - task: MSBuild@1
    inputs:
      solution: 'build/*.sln'
      msbuildArchitecture: 'x64'
      platform: 'ARM64'
      configuration: 'RelWithDebInfo'

# Visual Studio 2017 variants

- job: Windows_2016_VS2017_Win32
  displayName: "Windows 2016, VS 2017, Win32"
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - task: CMake@1
    inputs:
      cmakeArgs: -G "Visual Studio 15 2017" -A Win32 ..
  - task: MSBuild@1
    inputs:
      solution: 'build/*.sln'
      platform: 'Win32'
      configuration: 'RelWithDebInfo'
- job: Windows_2016_VS2017_x64
  displayName: "Windows 2016, VS 2017, x64"
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - task: CMake@1
    inputs:
      cmakeArgs: -G "Visual Studio 15 2017" -A x64 ..
  - task: MSBuild@1
    inputs:
      solution: 'build/*.sln'
      msbuildArchitecture: 'x64'
      platform: 'x64'
      configuration: 'RelWithDebInfo'
- job: Windows_2016_VS2017_ARM
  displayName: "Windows 2016, VS 2017, ARM"
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - task: CMake@1
    inputs:
      cmakeArgs: -G "Visual Studio 15 2017" -A ARM ..
  - task: MSBuild@1
    inputs:
      solution: 'build/*.sln'
      platform: 'ARM'
      configuration: 'RelWithDebInfo'
- job: Windows_2016_VS2017_ARM64
  displayName: "Windows 2016, VS 2017, ARM64"
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - task: CMake@1
    inputs:
      cmakeArgs: -G "Visual Studio 15 2017" -A ARM64 ..
  - task: MSBuild@1
    inputs:
      solution: 'build/*.sln'
      msbuildArchitecture: 'x64'
      platform: 'ARM64'
      configuration: 'RelWithDebInfo'

# Visual Studio 2015 variants

- job: Windows_2012R2_VS2015_Win32
  displayName: "Windows 2012 R2, VS 2015, Win32"
  pool:
    vmImage: 'vs2015-win2012r2'
  steps:
  - task: CMake@1
    inputs:
      cmakeArgs: -G "Visual Studio 14 2015" -A Win32 ..
  - task: MSBuild@1
    inputs:
      solution: 'build/*.sln'
      platform: 'Win32'
      configuration: 'RelWithDebInfo'
- job: Windows_2012R2_VS2015_x64
  displayName: "Windows 2012 R2, VS 2015, x64"
  pool:
    vmImage: 'vs2015-win2012r2'
  steps:
  - task: CMake@1
    inputs:
      cmakeArgs: -G "Visual Studio 14 2015" -A x64 ..
  - task: MSBuild@1
    inputs:
      solution: 'build/*.sln'
      msbuildArchitecture: 'x64'
      platform: 'x64'
      configuration: 'RelWithDebInfo'
- job: Windows_2012R2_VS2015_ARM
  displayName: "Windows 2012 R2, VS 2015, ARM"
  condition: "false" # No-one should really be targeting 2015 ARM (this is like, original Windows 8 ARM devices).
  pool:
    vmImage: 'vs2015-win2012r2'
  steps:
  - task: CMake@1
    inputs:
      cmakeArgs: -G "Visual Studio 14 2015" -A ARM ..
  - task: MSBuild@1
    inputs:
      solution: 'build/*.sln'
      platform: 'ARM'
      configuration: 'RelWithDebInfo'

# Ubuntu variants

- job: Ubuntu_1804_GCC
  displayName: "Ubuntu 18.04"
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script: |
      sudo apt install -y libsodium-dev
    displayName: Install libsodium-dev
  - task: CMake@1
    inputs:
      cmakeArgs: ..
  - script: |
      cd build && make
    displayName: Make
- job: Ubuntu_1604_GCC
  displayName: "Ubuntu 16.04"
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - script: |
      sudo apt install -y libsodium-dev
    displayName: Install libsodium-dev
  - task: CMake@1
    inputs:
      cmakeArgs: ..
  - script: |
      cd build && make
    displayName: Make

# macOS variants

- job: macOS_1014
  displayName: "macOS 10.14"
  pool:
    vmImage: 'macOS-10.14'
  steps:
  - script: |
      brew install libsodium
    displayName: Install libsodium
  - task: CMake@1
    inputs:
      cmakeArgs: ..
  - script: |
      cd build && make
    displayName: Make
- job: macOS_1013
  displayName: "macOS 10.13"
  pool:
    vmImage: 'macOS-10.13'
  steps:
  - script: |
      brew install libsodium
    displayName: Install libsodium
  - task: CMake@1
    inputs:
      cmakeArgs: ..
  - script: |
      cd build && make
    displayName: Make